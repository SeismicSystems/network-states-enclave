AWSTemplateFormatVersion: '2010-09-09'
Description: My CloudFormation template for ALB, EC2, ElastiCache/Redis, and DynamoDB

Parameters:
  VPCId:
    Description: The VPC ID to launch the EC2 instance in.
    Type: String
#  PublicSubnetId1:
#    Description: The subnet ID to launch the EC2 instance in.
#    Type: AWS::EC2::Subnet::Id
#  PublicSubnetId2:
#    Description: The subnet ID to launch the EC2 instance in.
#    Type: AWS::EC2::Subnet::Id
  LoadBalancerSSLCert:
    Description: The subnet ID to launch the EC2 instance in.
    Type: String
  MainApplicationName:
    Description: The subnet ID to launch the EC2 instance in.
    Type: String
  EnvironParameter:
    Description: The subnet ID to launch the EC2 instance in.
    Type: String
  TeamName:
    Description: The subnet ID to launch the EC2 instance in.
    Type: String
  EC2InstanceType:
    Description: The subnet ID to launch the EC2 instance in.
    Type: String
    Default: t2.micro
  EC2InstanceKeyPairName:
    Description: The subnet ID to launch the EC2 instance in.
    Type: String
    Default: Ec2instanceKeyPair
  DynamoDBTableName:
    Description: The subnet ID to launch the EC2 instance in.
    Type: String
  EC2AMI:
    Description: The subnet ID to launch the EC2 instance in.
    Type: String
    Default: ami-0a3c3a20c09d6f377
  EnclaveImageVersion:
    Description: The subnet ID to launch the EC2 instance in.
    Type: String
    Default: 0.0.3
  NatGatwayID:
    Description: NatGateway ID in VPC-id.
    Type: String


Conditions:
  isProd: !Equals
    - !Ref EnvironParameter
    - prod



Resources:
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPCId
      AvailabilityZone: us-east-1a
      CidrBlock: 172.31.128.0/22
      Tags:
        - Key: Name
          Value: !Sub "${MainApplicationName}-PublicSubnet-1a"

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPCId
      AvailabilityZone: us-east-1b
      CidrBlock: 172.31.132.0/22
      Tags:
        - Key: Name
          Value: !Sub "${MainApplicationName}-PublicSubnet-1b"

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPCId
      AvailabilityZone: us-east-1a
      CidrBlock: 172.31.136.0/22
      Tags:
        - Key: Name
          Value: !Sub "${MainApplicationName}-PrivateSubnet-1a"

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPCId
      AvailabilityZone: us-east-1b
      CidrBlock: 172.31.140.0/22
      Tags:
        - Key: Name
          Value: !Sub "${MainApplicationName}-PrivateSubnet-1b"

  RoutesOfPrivateRouteTable:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref NatGatwayID

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPCId

  PrivateSubnet1Route:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet2Route:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable


  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub "${MainApplicationName} ALB Security Group ${EnvironParameter}"
      SecurityGroupIngress:
        - Description: HTTP IPv4
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - Description: HTTPS IPv4
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub "${MainApplicationName} EC2 Security Group ${EnvironParameter}"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !GetAtt ALBSecurityGroup.GroupId
        - !If
          - isProd
          - !Ref AWS::NoValue
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: 0.0.0.0/0
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${MainApplicationName}-Ec2Role-${EnvironParameter}"
      Tags:
        - Key: Application
          Value: !Sub "${MainApplicationName}"
        - Key: Environment
          Value: !Sub "${EnvironParameter}"
        - Key: Organization
          Value: !Sub "${TeamName}"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: EC2ExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: DynomoDBPermission
                Effect: Allow
                Action:
                  - dynamodb:BatchGet*
                  - dynamodb:DescribeStream
                  - dynamodb:DescribeTable
                  - dynamodb:Get*
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:BatchWrite*
                  - dynamodb:DeleteItem
                  - dynamodb:Update*
                  - dynamodb:PutItem
                Resource:
                  - !Sub "${DynamoDBTable.Arn}"
                  - !Sub "${DynamoDBTable.Arn}/*"
              - Sid: GetSSMParameters
                Effect: Allow
                Action:
                  - ssm:GetParameter*
                Resource: "*"
              - Sid: S3BucketAccess
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource: "*"
              - Sid: PutCloudWatchLogs
                Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                  - ec2:DescribeVolumes
                  - ec2:DescribeTags
                  - logs:PutLogEvents
                  - logs:DescribeLogStreams
                  - logs:DescribeLogGroups
                  - logs:CreateLogStream
                  - logs:CreateLogGroup
                Resource: "*"
              - Sid: ECRImagePullAccess
                Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                Resource: "*"

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub "${MainApplicationName}-EC2InstanceProfile-${EnvironParameter}"
      Path: /
      Roles:
        - !Ref EC2Role
  
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName : !Sub "${MainApplicationName}-InstanceLogs-${EnvironParameter}"
      RetentionInDays: 90 #!Ref LogsRetentionInDays

  EC2LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        IamInstanceProfile:
          Name: !Ref EC2InstanceProfile
        ImageId: !Ref EC2AMI
        InstanceType: !Ref EC2InstanceType
        KeyName: !If [isProd, !Ref AWS::NoValue, !Ref EC2InstanceKeyPairName]
        NetworkInterfaces:
          - AssociatePublicIpAddress: false
            DeviceIndex: 0
            Groups:
            - !GetAtt EC2SecurityGroup.GroupId
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            # Update and install dependencies
            sudo yum install -y aws-cfn-bootstrap
            sudo yum update -y
            sudo yum install -y docker
            sudo yum install -y amazon-cloudwatch-agent
            sudo yum install -y collectd
            sudo service docker start
            sudo usermod -aG docker ec2-user
            aws ecr get-login-password --region us-east-1 | sudo docker login --username AWS --password-stdin 411486418994.dkr.ecr.us-east-1.amazonaws.com
            sudo docker run -p 80:80  \
            --log-driver=awslogs \
            --log-opt awslogs-region=us-east-1 \
            --log-opt awslogs-group=${MainApplicationName}-InstanceLogs-${EnvironParameter} \
            --log-opt awslogs-create-group=true \
            -d 411486418994.dkr.ecr.us-east-1.amazonaws.com/test-enclave:${EnclaveImageVersion}
            # /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource EC2LaunchTemplate --region ${AWS::Region}
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource AutoScalingGroup --region ${AWS::Region}
            sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c ssm:${EC2CloudWatchParameter} -s


  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref EC2LaunchTemplate
        Version: !GetAtt 'EC2LaunchTemplate.LatestVersionNumber'
      MinSize: 1 #!Ref MinSize
      DesiredCapacity: 1
      MaxSize: 3 #!Ref MaxSize
      Cooldown: '600'
      #DefaultInstanceWarmup: 30
      HealthCheckGracePeriod: 900 # needs to be in sync with CreationPolicy/UpdatePolicy timeout
      # HealthCheckType: ELB # EC2
      TargetGroupARNs:
      - !Ref EC2TargetGroup
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      Tags:
      - Key: Name
        Value: !Sub "${MainApplicationName}-ec2-cluster-${EnvironParameter}"
        PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingScheduledAction:
        IgnoreUnmodifiedGroupSizeProperties: true
#      AutoScalingReplacingUpdate:
#        WillReplace: true
      AutoScalingRollingUpdate:
        MinInstancesInService: 1
        PauseTime: PT15M
        SuspendProcesses:
        - HealthCheck
        - ReplaceUnhealthy
        - AZRebalance
        - AlarmNotification
        - ScheduledActions
        WaitOnResourceSignals: true

#  ScaleUpPolicy:
#      Type: AWS::AutoScaling::ScalingPolicy
#      Properties:
#        AdjustmentType: ChangeInCapacity
#        AutoScalingGroupName: !Ref AutoScalingGroup
#        ScalingAdjustment: '1'
#
#  ScaleDownPolicy:
#    Type: AWS::AutoScaling::ScalingPolicy
#    Properties:
#      AdjustmentType: ChangeInCapacity
#      AutoScalingGroupName: !Ref AutoScalingGroup
#      ScalingAdjustment: '-1'

  DesiredScalePolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      PolicyType: TargetTrackingScaling
      AutoScalingGroupName: !Ref AutoScalingGroup
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: 80

#  ScaleUpCloudWatchAlarm:
#    Type: AWS::CloudWatch::Alarm
#    Properties:
#      EvaluationPeriods: '1'
#      Statistic: Average
#      Threshold: '70'
#      AlarmDescription: Alarm set fo 70% of CPU utilization
#      Period: '60'
#      AlarmActions:
#        - !Ref ScaleUpPolicy
#      Namespace: AWS/EC2
#      Dimensions:
#        - Name: AutoScalingGroupName
#          Value:
#            Ref: AutoScalingGroup
#      ComparisonOperator: GreaterThanThreshold
#      MetricName: CPUUtilization
#
#
#  ScaleDownCloudWatchAlarm:
#    Type: AWS::CloudWatch::Alarm
#    Properties:
#      EvaluationPeriods: '1'
#      Statistic: Average
#      Threshold: '30'
#      AlarmDescription: Alarm set fo 30% of CPU utilization
#      Period: '60'
#      AlarmActions:
#        - !Ref ScaleDownPolicy
#      Namespace: AWS/EC2
#      Dimensions:
#        - Name: AutoScalingGroupName
#          Value:
#            Ref: AutoScalingGroup
#      ComparisonOperator: LessThanThreshold
#      MetricName: CPUUtilization

  # IAM role that executes ECS actions such as pulling the image and storing the application logs in cloudwatch


  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub "${MainApplicationName}-ALB-${EnvironParameter}"
      Type: application
      IpAddressType: ipv4
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: 3600 #1hour
      Scheme: internet-facing
      Subnets:
        - !Ref PublicSubnet1 #us-east-1a
        - !Ref PublicSubnet2 #us-east-1b
      SecurityGroups:
        - !GetAtt ALBSecurityGroup.GroupId


  EC2TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub "${MainApplicationName}-EC2TragetGroup-${EnvironParameter}"
      Protocol: HTTP
      Port: 80
      HealthCheckEnabled: true
      HealthCheckProtocol: HTTP
      HealthCheckPort: 80
      HealthCheckPath: /ping
      VpcId: !Ref VPCId
      Matcher:
        HttpCode: 200

  HTTPSListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Certificates:
        - CertificateArn: !Ref LoadBalancerSSLCert
      DefaultActions:
        - Type: forward
          ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Ref EC2TargetGroup
                Weight: 1
            TargetGroupStickinessConfig:
              DurationSeconds: 86400 # 1 day
              Enabled: true
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: HTTPS
      SslPolicy: ELBSecurityPolicy-TLS13-1-2-2021-06
  HTTPlistener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Ref EC2TargetGroup
                Weight: 1
            TargetGroupStickinessConfig:
              DurationSeconds: 86400 # 1 day
              Enabled: true
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP

  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref DynamoDBTableName
      AttributeDefinitions:
        - AttributeName: hash
          AttributeType: S
      KeySchema:
        - AttributeName: hash
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST


  EC2CloudWatchParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: ECS
      Name: !Sub "${MainApplicationName}-AmazonCloudWatch-EC2"
      Type: String
      Value: !Sub |
        {
          "agent": {
            "metrics_collection_interval": 60,
            "run_as_user": "root"
          },
          "logs": {
            "force_flush_interval": 5,
            "logs_collected": {
              "files": {
                "collect_list": [
                  {
                    "file_path": "/var/log/messages",
                    "log_group_name": "${MainApplicationName}-InstanceLogs-${EnvironParameter}",
                    "log_stream_name": "{instance_id}-/var/log/messages",
                    "timestamp_format": "%b %d %H:%M:%S"
                  },
                  {
                    "file_path": "/var/log/dmesg",
                    "log_group_name": "${MainApplicationName}-InstanceLogs-${EnvironParameter}",
                    "log_stream_name": "{instance_id}-/var/log/dmesg"
                  },
                  {
                    "file_path": "/var/log/docker",
                    "log_group_name": "${MainApplicationName}-InstanceLogs-${EnvironParameter}",
                    "log_stream_name": "{instance_id}-/var/log/docker",
                    "timestamp_format": "%Y-%m-%dT%H:%M:%S.%f"
                  }
                ]
              }
            }
          },
          "metrics": {
            "namespace": "test-ec2-metrics",
            "aggregation_dimensions": [
              [
                "AutoScalingGroupName"
              ],
              [
                "InstanceId"
              ]
            ],
            "append_dimensions": {
              "AutoScalingGroupName": "${!aws:AutoScalingGroupName}",
              "InstanceId": "${!aws:InstanceId}",
              "InstanceType": "${!aws:InstanceType}"
            },
            "metrics_collected": {
              "collectd": {
                "metrics_aggregation_interval": 60
              },
              "disk": {
                "measurement": [
                  "used_percent"
                ],
                "metrics_collection_interval": 60,
                "resources": [
                  "/"
                ]
              },
              "mem": {
                "measurement": [
                  "mem_used_percent"
                ],
                "metrics_collection_interval": 60
              }
            }
          }
        }
